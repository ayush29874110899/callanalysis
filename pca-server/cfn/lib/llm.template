AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Transcribe Post Call Analytics - PCA Server - S3 Trigger

Transform: AWS::Serverless-2016-10-31

Parameters:

  LLMPromptSummaryTemplate:
    Type: String
    Description: >-
      Prompt to use to generate insights for a call. This can be a single string where an LLM returns a string,
      or a single string where the LLM returns a JSON object with key/value pairs, or a string that contains
      a JSON Object with key/value pairs, where the LLM will run one inference on each key/value pair with the value
      containing the prompt. Use {transcript} as a placeholder for where the call transcript will be injected.
    Default: >-
      {
        "Summary":"<br><br>Human: Answer the questions below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>What is a summary of the transcript?</question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:",
        "Topic":"<br><br>Human: Answer the questions below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>What is the topic of the call? For example, iphone issue, billing issue, cancellation. Only reply with the topic, nothing more.</question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:",
        "Product":"<br><br>Human: Answer the questions below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>What product did the customer call about? For example, internet, broadband, mobile phone, mobile plans. Only reply with the product, nothing more.</question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:",
        "Resolved":"<br><br>Human: Answer the questions below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>Did the agent resolve the customer's questions? Only reply with yes or no, nothing more. </question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:",
        "Callback":"<br><br>Human: Answer the questions below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>Was this a callback? (yes or no) Only reply with yes or no, nothing more.</question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:",
        "Politeness":"<br><br>Human: Answer the question below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>Was the agent polite and professional? (yes or no) Only reply with yes or no, nothing more.</question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:",
        "Actions":"<br><br>Human: Answer the question below, defined in <question></question> based on the transcript defined in <transcript></transcript>. If you cannot answer the question, reply with 'n/a'. Use gender neutral pronouns. When you reply, only respond with the answer.<br><br><question>What actions did the Agent take? </question><br><br><transcript><br>{transcript}<br></transcript><br><br>Assistant:"
      }

  LLMPromptQueryTemplate:
    Type: String
    Description: This is the LLM prompt template to use when querying an individual call transcript.
    Default: >-
      <br><br>Human: You are an AI chatbot. Carefully read the following transcript within <transcript></transcript> tags. Provide a
      short answer to the question at the end. If the answer cannot be determined from the transcript, then reply saying Sorry,
      I don't know. Use gender neutral pronouns. Do not use XML tags in the answer. <br><transcript><br>{transcript}<br></transcript><br>{question}<br><br>Assistant:

Resources:
  LLMPromptTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
        - AttributeName: LLMPromptTemplateId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: LLMPromptTemplateId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: True
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ConfigureDynamoDBRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: allow-s3-notification-config
          PolicyDocument:
            Statement:
              Effect: Allow
              Resource: !GetAtt LLMPromptTable.Arn
              Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
        - PolicyName: SSMGetParameterPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*

  
ConfigureDynamoDBFunction:
  Type: "AWS::Lambda::Function"
  Properties:
    Code:
      ZipFile: !Sub |
        from __future__ import print_function
        import urllib3
        import json
        SUCCESS = "SUCCESS"
        FAILED = "FAILED"
        http = urllib3.PoolManager()
        def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False, reason=None):
            responseUrl = event['ResponseURL']
            print(responseUrl)
            responseBody = {
                'Status' : responseStatus,
                'Reason' : reason or "See the details in CloudWatch Log Stream: {}".format(context.log_stream_name),
                'PhysicalResourceId' : physicalResourceId or context.log_stream_name,
                'StackId' : event['StackId'],
                'RequestId' : event['RequestId'],
                'LogicalResourceId' : event['LogicalResourceId'],
                'NoEcho' : noEcho,
                'Data' : responseData
            }
            json_responseBody = json.dumps(responseBody)
            print("Response body:")
            print(json_responseBody)
            headers = {
                'content-type' : '',
                'content-length' : str(len(json_responseBody))
            }
            try:
                response = http.request('PUT', responseUrl, headers=headers, body=json_responseBody)
                print("Status code:", response.status)
            except Exception as e:
                print("send(..) failed executing http.request(..):", e)

        import boto3
        import json

        def lambda_handler(event, context):
            print(event)
            the_event = event['RequestType']
            print("The event is: ", str(the_event))

            table_name = event['ResourceProperties']['TableName']
            llm_prompt_summary_template = event['ResourceProperties']['LLMPromptSummaryTemplate']
            llm_prompt_query_template = event['ResourceProperties']['LLMPromptQueryTemplate']

            response_data = {}
            dynamodb = boto3.resource('dynamodb')
            table = dynamodb.Table(table_name)
            ssm_client = boto3.client('ssm')

            try:
                if the_event == 'Create':
                    try:
                        summary_prompt_template_str = ssm_client.get_parameter(Name="LLMPromptSummaryTemplate")["Parameter"]["Value"]
                    except Exception as e:
                        print("No parameter found:", str(e))
                        summary_prompt_template_str = llm_prompt_summary_template

                    try:
                        summary_prompt_template = json.loads(summary_prompt_template_str)
                    except Exception as e:
                        print("Not a valid JSON:", str(e))
                        summary_prompt_template = {"Summary": summary_prompt_template_str}

                    update_expression = "SET"
                    expression_attribute_names = {}
                    expression_attribute_values = {}

                    i = 1
                    for key, value in summary_prompt_template.items():
                        update_expression += f" #{i} = :{i},"
                        expression_attribute_names[f"#{i}"] = f"{i}#{key}"
                        expression_attribute_values[f":{i}"] = value
                        i += 1

                    update_expression = update_expression[:-1]

                    try:
                        query_prompt_template = ssm_client.get_parameter(Name="LLMPromptQueryTemplate")["Parameter"]["Value"]
                    except Exception as e:
                        print("No parameter found:", str(e))
                        query_prompt_template = llm_prompt_query_template    

                    response = table.update_item(
                          Key={'LLMPromptTemplateId': 'LLMPromptSummaryTemplate'},
                          UpdateExpression=update_expression,
                          ExpressionAttributeValues=expression_attribute_values,
                          ExpressionAttributeNames=expression_attribute_names
                        )

                    item = {
                        'LLMPromptTemplateId': 'LLMPromptQueryTemplate',
                        'LLMPromptTemplateValue': query_prompt_template
                    }

                    response = table.put_item(Item=item)

                print("Operation successful!")
                send(event, context, SUCCESS, response_data)
            except Exception as e:
                print("Operation failed...")
                print(str(e))
                response_data['Data'] = str(e)
                send(event, context, FAILED, response_data)

    Handler: index.lambda_handler
    Role: !GetAtt ConfigureDynamoDBRole.Arn
    Runtime: python3.11
    MemorySize: 128
    Timeout: 60
    Environment:
      Variables:
        StackName: !Ref AWS::StackName
        TableName: !Ref LLMPromptTable
        LLMPromptSummaryTemplate: !Ref LLMPromptSummaryTemplate
        LLMPromptQueryTemplate: !Ref LLMPromptQueryTemplate


  ConfigureDynamoDB:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt ConfigureDynamoDBFunction.Arn
      TableName: !Ref LLMPromptTable
      StackName: !Ref AWS::StackName
      LLMPromptSummaryTemplate: !Ref LLMPromptSummaryTemplate
      LLMPromptQueryTemplate: !Ref LLMPromptQueryTemplate

Outputs:
    LLMTableName:
      Value: !Ref LLMPromptTable
